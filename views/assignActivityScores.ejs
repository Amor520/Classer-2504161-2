<%- include('partials/header') %>

<div class="container main-container">
  <div class="row">
    <div class="col-12">
      <div class="card shadow-sm mb-5">
        <div class="card-header bg-primary text-white">
          <h5 class="card-title mb-0"><i class="bi bi-plus-circle"></i> 分配活动分值</h5>
        </div>
        <div class="card-body">
          <div class="row mb-4">
            <div class="col-md-8">
              <h6><strong>活动名称：</strong><%= activity.活动名称 %></h6>
              <p class="text-muted"><strong>活动日期：</strong><%= activity.活动日期 ? new Date(activity.活动日期).toLocaleDateString() : '无日期' %></p>
            </div>
            <div class="col-md-4 text-md-end">
            <p class="mb-0"><strong>默认分值：</strong><span class="badge bg-primary"><%= defaultScore %></span></p>
            </div>
          </div>

          <!-- 添加从抽签历史中选择学生功能 -->
          <div class="card mb-4">
            <div class="card-header bg-light">
              <h6 class="mb-0"><i class="bi bi-clock-history"></i> 从抽签历史中选择学生</h6>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-12">
                  <select id="drawHistorySelect" class="form-select mb-3">
                    <option value="">-- 选择一个抽签记录 --</option>
                    <!-- 抽签历史记录将通过JavaScript动态加载 -->
                  </select>
                  <div id="drawHistoryInfo" class="alert alert-info d-none">
                    <div class="row">
                      <div class="col-md-4">
                        <p class="mb-1"><i class="bi bi-bookmark"></i> <strong>活动名称：</strong></p>
                        <p class="mb-0"><span id="drawActivityName" class="text-primary fw-bold"></span></p>
                      </div>
                      <div class="col-md-4">
                        <p class="mb-1"><i class="bi bi-calendar"></i> <strong>抽签时间：</strong></p>
                        <p class="mb-0"><span id="drawTime"></span></p>
                      </div>
                      <div class="col-md-4">
                        <p class="mb-1"><i class="bi bi-people"></i> <strong>抽中人数：</strong></p>
                        <p class="mb-0"><span id="drawCount" class="badge bg-primary"></span> 人</p>
                      </div>
                    </div>
                  </div>
                  <div id="drawStudentsList" class="d-none">
                    <div class="card">
                      <div class="card-header bg-light py-2">
                        <div class="d-flex justify-content-between align-items-center">
                          <h6 class="mb-0"><i class="bi bi-check-circle-fill"></i> 抽中的学生</h6>
                          <div>
                            <button type="button" id="selectAllDrawnStudents" class="btn btn-sm btn-outline-primary">
                              <i class="bi bi-check-all"></i> 全选
                            </button>
                          </div>
                        </div>
                      </div>
                      <div class="card-body">
                        <div id="drawnStudents" class="mb-3"></div>
                        <button type="button" id="addDrawnStudents" class="btn btn-primary">
                          <i class="bi bi-plus-circle"></i> 添加选中的学生
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <form action="/activity/assign/<%= activity.活动ID %>" method="post" id="assignForm">
            <div class="mb-4">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h6 class="mb-0"><i class="bi bi-people"></i> 选择参与学生</h6>
                <div>
                  <button type="button" id="viewSelectedStudents" class="btn btn-sm btn-outline-info">
                    <i class="bi bi-eye"></i> <span id="selectedCount">0</span> 名学生已选择
                  </button>
                </div>
              </div>
              
              <!-- 已选择学生列表面板 -->
              <div id="selectedStudentsPanel" class="card mb-3 d-none">
                <div class="card-header bg-light">
                  <div class="d-flex justify-content-between align-items-center">
                    <h6 class="mb-0"><i class="bi bi-person-check"></i> 已选择的学生</h6>
                    <button type="button" class="btn-close" id="closeSelectedPanel"></button>
                  </div>
                </div>
                <div class="card-body">
                  <div id="selectedStudentsList" class="d-flex flex-wrap"></div>
                </div>
              </div>
              
              <!-- 搜索和操作按钮 -->
              <div class="row mb-3">
                <div class="col-md-6">
                <div class="input-group">
                    <input type="text" id="studentSearch" class="form-control" placeholder="搜索学生姓名或学号...">
                    <button type="button" class="btn btn-outline-secondary" onclick="clearSearch()">
                      <i class="bi bi-x-circle"></i>
                    </button>
                  </div>
                </div>
                <div class="col-md-6 text-end">
                  <button type="button" id="selectAll" class="btn btn-sm btn-outline-primary">
                    <i class="bi bi-square"></i> 全选
                  </button>
                  
                  <div class="btn-group ms-2">
                    <input type="number" id="batchScore" class="form-control form-control-sm" style="max-width: 80px;" value="<%= defaultScore %>" step="0.5" min="0">
                    <button type="button" id="applyBatchScore" class="btn btn-sm btn-outline-secondary">
                      应用分值
                    </button>
                  </div>
                </div>
              </div>
              
              <div class="table-responsive">
                <table class="table table-hover">
                  <thead class="table-light">
                    <tr>
                      <th width="60">选择</th>
                      <th>姓名</th>
                      <th>学号</th>
                      <th width="150">分值</th>
                    </tr>
                  </thead>
                  <tbody id="studentTableBody">
                    <% students.forEach(student => { %>
                    <tr class="student-row" data-student-name="<%= student.姓名 %>" data-student-id="<%= student.学号 %>">
                      <td>
                        <input type="checkbox" name="studentIds" value="<%= student.学号 %>" class="form-check-input student-checkbox">
                          </td>
                      <td><%= student.姓名 %></td>
                          <td><%= student.学号 %></td>
                          <td>
                        <input type="number" name="scores" value="<%= defaultScore %>" class="form-control form-control-sm score-input" step="0.5" min="0" required disabled>
                          </td>
                        </tr>
                      <% }); %>
                  </tbody>
                </table>
              </div>
              
              <!-- 分页控件 -->
              <div class="d-flex justify-content-between align-items-center mt-3">
                <div>
                  <span id="pageInfo">第 1 页，共 1 页</span>
                </div>
                <div>
                  <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-outline-secondary" id="prevPage" disabled>
                      <i class="bi bi-chevron-left"></i> 上一页
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-secondary" id="nextPage" disabled>
                      下一页 <i class="bi bi-chevron-right"></i>
                    </button>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="text-end">
              <a href="/activity/<%= activity.活动ID %>" class="btn btn-outline-secondary me-2">取消</a>
              <button type="submit" class="btn btn-success">保存分值设置</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('partials/footer') %>

<script>
  // 定义分页和搜索相关变量
  let currentPage = 1;
  const pageSize = 20; // 每页显示20个学生
  let filteredStudents = [];
  let allOriginalStudentRows = []; // 保存所有原始学生行
  let selectedStudentIds = new Set(); // 保存所有选中的学生ID
  const defaultScore = parseFloat('<%= defaultScore %>') || 1; // 全局保存默认分值
  
  // 页面加载完成后执行
  document.addEventListener('DOMContentLoaded', function() {
    // 获取抽签历史记录
    fetchDrawHistory();
    
    // 初始化保存所有原始学生行
    allOriginalStudentRows = Array.from(document.querySelectorAll('.student-row'));
    
    // 初始化已选择的学生（从DOM中读取初始选中状态）
    document.querySelectorAll('input[name="studentIds"]:checked').forEach(checkbox => {
      selectedStudentIds.add(checkbox.value);
    });
    
    // 表单提交验证
    document.getElementById('assignForm').addEventListener('submit', function(e) {
      // 阻止表单默认提交
      e.preventDefault();
      
      // 检查是否有选中的学生
      if (selectedStudentIds.size === 0) {
        alert('请至少选择一名学生');
        return false;
      }
      
      // 确保选中的复选框状态与分数输入框状态一致
      updateFormBeforeSubmit();
      
      // 显示确认对话框
      if (confirm('确认要将这 ' + selectedStudentIds.size + ' 名学生添加到活动 "<%= activity.活动名称 %>" 中吗？')) {
        console.log('正在提交表单...');
        // 提交表单
        this.submit();
      }
    });
    
    // 查看已选择学生按钮事件
    document.getElementById('viewSelectedStudents').addEventListener('click', function() {
      const panel = document.getElementById('selectedStudentsPanel');
      panel.classList.toggle('d-none');
      updateSelectedStudentsList();
    });
    
    // 关闭已选择学生面板按钮事件
    document.getElementById('closeSelectedPanel').addEventListener('click', function() {
      document.getElementById('selectedStudentsPanel').classList.add('d-none');
    });
    
    // 监听抽签历史选择框变更事件
    document.getElementById('drawHistorySelect').addEventListener('change', function() {
      const historyId = this.value;
      if (historyId) {
        fetchDrawHistoryDetail(historyId);
      } else {
        // 隐藏抽签历史详情
        document.getElementById('drawHistoryInfo').classList.add('d-none');
        document.getElementById('drawStudentsList').classList.add('d-none');
      }
    });
    
    // 监听添加抽中学生按钮点击事件
    document.getElementById('addDrawnStudents').addEventListener('click', function() {
      addDrawnStudentsToForm();
    });
    
    // 监听全选抽中学生按钮
    const selectAllDrawnBtn = document.getElementById('selectAllDrawnStudents');
    if (selectAllDrawnBtn) {
      selectAllDrawnBtn.addEventListener('click', function() {
        const checkboxes = document.querySelectorAll('.draw-student-checkbox');
        const isSelectAll = !checkboxes.length || Array.from(checkboxes).some(cb => !cb.checked);
        
        checkboxes.forEach(checkbox => {
          checkbox.checked = isSelectAll;
        });
        
        // 更新按钮文本
        this.innerHTML = isSelectAll ? 
          '<i class="bi bi-check-all"></i> 取消全选' : 
          '<i class="bi bi-check-all"></i> 全选';
      });
    }
    
    // 全选/取消全选按钮
    setupSelectAllButton();
    
    // 初始化学生列表分页
    initializeStudentTable();
    
    // 添加学生搜索功能（使用防抖）
    let searchTimeout;
    document.getElementById('studentSearch').addEventListener('input', function() {
      const searchValue = this.value;
      
      // 清除之前的定时器
      clearTimeout(searchTimeout);
      
      // 设置新的定时器，300ms后执行搜索
      searchTimeout = setTimeout(() => {
        filterStudents(searchValue);
      }, 300);
    });
    
    // 添加分页按钮事件
    document.getElementById('prevPage').addEventListener('click', function() {
      if (currentPage > 1) {
        currentPage--;
        renderStudentTable();
      }
    });
    
    document.getElementById('nextPage').addEventListener('click', function() {
      const maxPage = Math.ceil(filteredStudents.length / pageSize);
      if (currentPage < maxPage) {
        currentPage++;
        renderStudentTable();
      }
    });
    
    // 添加批量应用分值按钮事件
    document.getElementById('applyBatchScore').addEventListener('click', function() {
      const batchScore = document.getElementById('batchScore').value;
      const selectedCheckboxes = document.querySelectorAll('input[name="studentIds"]:checked');
      
      selectedCheckboxes.forEach(checkbox => {
          const row = checkbox.closest('tr');
        const scoreInput = row.querySelector('input[name="scores"]');
          scoreInput.value = batchScore;
      });
    });
  });
  
  // 获取抽签历史记录
  function fetchDrawHistory() {
    fetch('/draw/api/history')
      .then(response => response.json())
      .then(data => {
        if (data.success && data.history && data.history.length > 0) {
          const select = document.getElementById('drawHistorySelect');
          
          // 清空除了第一个选项外的所有选项
          while (select.options.length > 1) {
            select.remove(1);
          }
          
          // 添加抽签历史记录
          data.history.forEach(record => {
            const option = document.createElement('option');
            option.value = record.id;
            const date = new Date(record.created_at);
            option.text = `${record.activity_name} (${formatDate(date)}) - ${record.draw_count}人`;
            select.appendChild(option);
          });
        } else {
          console.error('获取抽签历史记录失败:', data.message || '未知错误');
        }
      })
      .catch(error => {
        console.error('获取抽签历史记录出错:', error);
      });
  }
  
  // 获取抽签历史记录详情
  function fetchDrawHistoryDetail(historyId) {
    fetch(`/draw/api/history/${historyId}`)
      .then(response => response.json())
      .then(data => {
        if (data.success && data.history) {
          const history = data.history;
          
          // 显示抽签历史详情
          document.getElementById('drawActivityName').textContent = history.activityName;
          document.getElementById('drawTime').textContent = formatDate(new Date(history.createdAt));
          document.getElementById('drawCount').textContent = history.drawCount;
          document.getElementById('drawHistoryInfo').classList.remove('d-none');
          
          // 显示抽中的学生
          const drawnStudentsContainer = document.getElementById('drawnStudents');
          drawnStudentsContainer.innerHTML = '';
          
          // 合并抽中的学生和已报名的学生
          const allStudents = [...history.drawnStudents];
          
          allStudents.forEach(student => {
            const badge = document.createElement('span');
            badge.className = 'badge bg-light text-dark draw-student-badge m-1';
            badge.setAttribute('data-name', student.name);
            badge.innerHTML = `${student.name} <input type="checkbox" class="draw-student-checkbox" checked />`;
            drawnStudentsContainer.appendChild(badge);
          });
          
          document.getElementById('drawStudentsList').classList.remove('d-none');
        } else {
          console.error('获取抽签历史记录详情失败:', data.message || '未知错误');
        }
      })
      .catch(error => {
        console.error('获取抽签历史记录详情出错:', error);
      });
  }
  
  // 添加抽中的学生到表单
  function addDrawnStudentsToForm() {
    // 获取所有选中的学生
    const selectedStudents = [];
    const checkboxes = document.querySelectorAll('.draw-student-checkbox:checked');
    
    checkboxes.forEach(checkbox => {
      const badge = checkbox.closest('.draw-student-badge');
      const studentName = badge.getAttribute('data-name');
      selectedStudents.push(studentName);
    });
    
    if (selectedStudents.length === 0) {
      alert('请至少选择一名学生');
      return;
    }
    
    // 获取默认分值
    const scoreValue = parseFloat('<%= defaultScore %>');
    
    // 遍历所有原始学生行，找到匹配的学生并标记为选中
    let selectedCount = 0;
    const notFoundStudents = [...selectedStudents]; // 初始假设所有学生都找不到
    
    allOriginalStudentRows.forEach(row => {
      const studentName = row.querySelector('td:nth-child(2)').textContent.trim();
      
      if (selectedStudents.includes(studentName)) {
        const studentId = row.getAttribute('data-student-id');
        // 添加到选中集合
        selectedStudentIds.add(studentId);
        
        selectedCount++;
        
        // 从未找到列表中移除
        const index = notFoundStudents.indexOf(studentName);
        if (index !== -1) {
          notFoundStudents.splice(index, 1);
        }
      }
    });
    
    // 如果有学生未找到，显示详细提示
    if (notFoundStudents.length > 0) {
      const message = `已添加 ${selectedCount} 名学生，但以下 ${notFoundStudents.length} 名学生在系统中未找到：\n\n${notFoundStudents.join('、')}`;
      alert(message);
    } else {
      alert(`已成功添加全部 ${selectedCount} 名学生`);
    }
    
    // 更新已选择学生数量和列表
    updateSelectedCount();
    updateSelectedStudentsList();
    
    // 重新渲染学生表格，确保选中状态正确显示
    renderStudentTable();
    
    // 隐藏抽签历史详情以表示已经完成添加
    document.getElementById('drawHistoryInfo').classList.add('d-none');
    document.getElementById('drawStudentsList').classList.add('d-none');
    document.getElementById('drawHistorySelect').value = '';
  }
  
  // 更新已选择学生数量
  function updateSelectedCount() {
    document.getElementById('selectedCount').textContent = selectedStudentIds.size;
  }
  
  // 更新已选择的学生列表显示
  function updateSelectedStudentsList() {
    const container = document.getElementById('selectedStudentsList');
    // 清空容器
    container.innerHTML = '';
    
    // 如果没有选中的学生，显示提示
    if (selectedStudentIds.size === 0) {
      container.innerHTML = '<div class="text-muted">暂无选中的学生</div>';
      return;
    }
    
    // 从所有学生中找出已选中的学生信息
    const selectedStudentsInfo = [];
    
    allOriginalStudentRows.forEach(row => {
      const studentId = row.getAttribute('data-student-id');
      if (selectedStudentIds.has(studentId)) {
        const studentName = row.getAttribute('data-student-name');
        selectedStudentsInfo.push({ id: studentId, name: studentName });
      }
    });
    
    // 按姓名排序
    selectedStudentsInfo.sort((a, b) => a.name.localeCompare(b.name, 'zh-CN'));
    
    // 添加已选择的学生到容器
    selectedStudentsInfo.forEach(student => {
      const badge = document.createElement('div');
      badge.className = 'badge bg-light text-dark m-1 p-2 selected-student-badge';
      badge.innerHTML = `
        ${student.name} 
        <button type="button" class="btn-close btn-close-sm ms-1" 
                onclick="removeSelectedStudent('${student.id}')" 
                aria-label="移除"></button>
      `;
      container.appendChild(badge);
    });
  }
  
  // 从选中列表中移除学生
  function removeSelectedStudent(studentId) {
    // 从选中集合中移除
    selectedStudentIds.delete(studentId);
    
    // 更新复选框状态
    const checkbox = document.querySelector(`input[name="studentIds"][value="${studentId}"]`);
    if (checkbox) {
      checkbox.checked = false;
      
      // 禁用对应的分值输入框
      const row = checkbox.closest('tr');
      const scoreInput = row.querySelector('input[name="scores"]');
      if (scoreInput) {
        scoreInput.disabled = true;
      }
    }
    
    // 更新已选择学生数量和列表
    updateSelectedCount();
    updateSelectedStudentsList();
    
    // 重新渲染表格
    renderStudentTable();
  }
  
  // 设置全选/取消全选按钮
  function setupSelectAllButton() {
    const selectAllBtn = document.getElementById('selectAll');
    if (selectAllBtn) {
      selectAllBtn.addEventListener('click', function() {
        // 判断当前是否为"全选"状态
        const isSelectAll = this.innerHTML.includes('全选');
        
        if (isSelectAll) {
          // 全选：将所有学生添加到选中集合
          allOriginalStudentRows.forEach(row => {
            const checkbox = row.querySelector('input[name="studentIds"]');
            if (checkbox) {
              selectedStudentIds.add(checkbox.value);
            }
          });
          
          // 更新按钮文本为"取消全选"
          this.innerHTML = '<i class="bi bi-check-square"></i> 取消全选';
        } else {
          // 取消全选：清空选中集合
          selectedStudentIds.clear();
          
          // 更新按钮文本为"全选"
          this.innerHTML = '<i class="bi bi-square"></i> 全选';
        }
        
        // 重新渲染表格，应用选中状态
        renderStudentTable();
        
        // 更新已选择学生数量和列表
        updateSelectedCount();
        updateSelectedStudentsList();
      });
    }
  }
  
  // 格式化日期
  function formatDate(date) {
    if (!(date instanceof Date)) return '';
    
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${year}-${month}-${day} ${hours}:${minutes}`;
  }
  
  // 初始化学生表格
  function initializeStudentTable() {
    // 初始化过滤后的学生列表为所有学生
    filteredStudents = [...allOriginalStudentRows];
    
    // 渲染学生表格
    renderStudentTable();
    
    // 设置学生复选框事件
    setupStudentCheckboxes();
  }
  
  // 渲染学生表格
  function renderStudentTable() {
    const tableBody = document.getElementById('studentTableBody');
    
    // 清空表格
    tableBody.innerHTML = '';
    
    // 计算当前页的起始和结束索引
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = Math.min(startIndex + pageSize, filteredStudents.length);
    
    // 显示当前页的学生
    for (let i = startIndex; i < endIndex; i++) {
      const originalRow = filteredStudents[i];
      const clonedRow = originalRow.cloneNode(true);
      
      // 获取复选框和学生ID
      const checkbox = clonedRow.querySelector('input[name="studentIds"]');
      const studentId = checkbox.value;
      
      // 根据全局选中状态设置复选框
      checkbox.checked = selectedStudentIds.has(studentId);
      
      // 设置分值输入框状态
      const scoreInput = clonedRow.querySelector('input[name="scores"]');
      if (scoreInput) {
        scoreInput.disabled = !checkbox.checked;
      }
      
      tableBody.appendChild(clonedRow);
    }
    
    // 更新分页信息
    const maxPage = Math.ceil(filteredStudents.length / pageSize);
    document.getElementById('pageInfo').textContent = `第 ${currentPage} 页，共 ${maxPage} 页`;
    
    // 更新分页按钮状态
    document.getElementById('prevPage').disabled = currentPage <= 1;
    document.getElementById('nextPage').disabled = currentPage >= maxPage || maxPage <= 1;
    
    // 重新绑定事件
    setupStudentCheckboxes();
  }
  
  // 设置学生复选框事件
  function setupStudentCheckboxes() {
    document.querySelectorAll('.student-checkbox').forEach(checkbox => {
      // 先移除已有的事件监听器，避免重复绑定
      checkbox.removeEventListener('change', handleCheckboxChange);
      
      // 添加新的事件监听器
      checkbox.addEventListener('change', handleCheckboxChange);
    });
  }
  
  // 复选框变化处理函数
  function handleCheckboxChange() {
    const checkbox = this;
    const studentId = checkbox.value;
    
    // 更新选中状态
    if (checkbox.checked) {
      selectedStudentIds.add(studentId);
    } else {
      selectedStudentIds.delete(studentId);
    }
    
    // 启用/禁用对应的分值输入框
      const row = checkbox.closest('tr');
      const scoreInput = row.querySelector('.score-input');
    if (scoreInput) {
      scoreInput.disabled = !checkbox.checked;
    }
    
    // 更新已选择学生数量和列表
    updateSelectedCount();
  }
  
  // 筛选学生
  function filterStudents(keyword) {
    // 如果关键字为空，显示全部学生
    if (!keyword.trim()) {
      filteredStudents = [...allOriginalStudentRows];
      currentPage = 1;
      renderStudentTable();
      return;
    }
    
    // 使用关键字筛选学生
    const lowerKeyword = keyword.toLowerCase();
    
    filteredStudents = allOriginalStudentRows.filter(row => {
      const studentName = row.getAttribute('data-student-name').toLowerCase();
      const studentId = row.getAttribute('data-student-id').toLowerCase();
      return studentName.includes(lowerKeyword) || studentId.includes(lowerKeyword);
    });
    
    // 重置到第一页并渲染
    currentPage = 1;
    renderStudentTable();
  }
  
  // 清除搜索
  function clearSearch() {
    document.getElementById('studentSearch').value = '';
    filterStudents('');
  }
  
  // 更新表单提交前的状态
  function updateFormBeforeSubmit() {
    // 确保所有选定的学生行的复选框被选中且分值输入框启用
    let enabledCount = 0;
    let checkedCount = 0;
    
    // 在提交前先创建隐藏表单元素，确保所有选中的学生都被提交
    // 首先清除可能存在的旧的隐藏元素
    document.querySelectorAll('.hidden-student-input').forEach(el => el.remove());
    
    // 为每个选中的学生创建隐藏的输入字段，确保即使不在当前页面显示的学生也能被提交
    const form = document.getElementById('assignForm');
    selectedStudentIds.forEach(studentId => {
      // 为学生ID创建隐藏输入
      const idInput = document.createElement('input');
      idInput.type = 'hidden';
      idInput.name = 'studentIds';
      idInput.value = studentId;
      idInput.className = 'hidden-student-input';
      form.appendChild(idInput);
      
      // 为学生分值创建隐藏输入
      // 首先尝试从当前页面获取分值
      let scoreValue = defaultScore;
      const studentRow = document.querySelector(`.student-row[data-student-id="${studentId}"]`);
      if (studentRow) {
        const scoreInput = studentRow.querySelector('input[name="scores"]');
        if (scoreInput) {
          scoreValue = scoreInput.value;
        }
      }
      
      const scoreInput = document.createElement('input');
      scoreInput.type = 'hidden';
      scoreInput.name = 'scores';
      scoreInput.value = scoreValue;
      scoreInput.className = 'hidden-student-input';
      form.appendChild(scoreInput);
      
      checkedCount++;
    });
    
    // 在页面上可见的学生行上更新选中状态
    document.querySelectorAll('.student-row').forEach(row => {
      const studentId = row.getAttribute('data-student-id');
      const checkbox = row.querySelector('input[name="studentIds"]');
      const scoreInput = row.querySelector('input[name="scores"]');
      
      if (selectedStudentIds.has(studentId)) {
        // 设置为选中状态
        if (checkbox) {
          checkbox.checked = true;
        }
        
        // 启用分值输入框
        if (scoreInput) {
          scoreInput.disabled = false;
          enabledCount++;
        }
      } else {
        // 设置为未选中状态
        if (checkbox) {
          checkbox.checked = false;
        }
        
        // 禁用分值输入框
        if (scoreInput) {
          scoreInput.disabled = true;
        }
      }
    });
    
    console.log(`表单提交前状态: 已选中 ${checkedCount} 个学生, 已启用 ${enabledCount} 个分值输入框, 已创建 ${checkedCount*2} 个隐藏表单元素`);
  }
</script>

<style>
  /* 抽签学生徽章样式 */
  .draw-student-badge {
    padding: 8px;
    margin: 4px;
    border-radius: 4px;
    display: inline-flex;
    align-items: center;
    transition: all 0.2s ease;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
  }
  
  .draw-student-badge:hover {
    background-color: #e9ecef;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .draw-student-badge input {
    margin-left: 6px;
  }
  
  /* 抽签历史记录选择框动画 */
  #drawHistoryInfo, #drawStudentsList {
    transition: all 0.3s ease;
    max-height: 500px;
    overflow: hidden;
  }
  
  #drawHistoryInfo.d-none, #drawStudentsList.d-none {
    max-height: 0;
  }
  
  /* 分页区域样式 */
  .pagination-info {
    color: #6c757d;
    font-size: 0.9rem;
  }
  
  /* 已选择学生徽章样式 */
  .selected-student-badge {
    display: inline-flex;
    align-items: center;
    padding: 8px 12px;
    margin: 4px;
    border-radius: 4px;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    font-weight: normal;
    transition: all 0.2s ease;
  }
  
  .selected-student-badge:hover {
    background-color: #e9ecef;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .btn-close-sm {
    font-size: 0.65rem;
    padding: 0.25rem;
  }
</style> 